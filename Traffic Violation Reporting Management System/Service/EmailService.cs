using System.Net;
using System.Net.Mail;
using Microsoft.Extensions.Options;
using Traffic_Violation_Reporting_Management_System.Models;

namespace Traffic_Violation_Reporting_Management_System.Service
{
    //can thi chuyen phan interface nay sang 1 file cs rieng nhe
    public interface IEmailService
    {
        Task<bool> SendOtpEmailAsync(string email, string otpCode, string userName);
        Task<bool> SendWelcomeEmailAsync(string email, string userName);
        Task<bool> SendForgotPasswordOtpEmailAsync(string email, string otpCode, string userName);
    }

    public class EmailService : IEmailService
    {
        private readonly ILogger<EmailService> _logger;
        private readonly EmailSettings _emailSettings;

        public EmailService(ILogger<EmailService> logger, IOptions<EmailSettings> emailSettings)
        {
            _logger = logger;
            _emailSettings = emailSettings.Value;
        }

        /// <summary>
        /// G·ª≠i email ch·ª©a m√£ OTP
        /// </summary>
        /// <param name="email">Email ng∆∞·ªùi nh·∫≠n</param>
        /// <param name="otpCode">M√£ OTP</param>
        /// <param name="userName">T√™n ng∆∞·ªùi d√πng</param>
        /// <returns>True n·∫øu g·ª≠i th√†nh c√¥ng</returns>
        public async Task<bool> SendOtpEmailAsync(string email, string otpCode, string userName)
        {
            try
            {
                var subject = "M√£ x√°c th·ª±c ƒëƒÉng k√Ω t√†i kho·∫£n";
                var htmlContent = GenerateOtpEmailHtml(otpCode, userName);
                var textContent = GenerateOtpEmailContent(otpCode, userName);

                var result = await SendEmailAsync(email, subject, htmlContent, textContent);
                
                if (!result)
                {
                    _logger.LogWarning("Kh√¥ng th·ªÉ g·ª≠i email OTP t·ªõi {Email}", email);
                }

                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói khi g·ª≠i email OTP t·ªõi {Email}", email);
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i email ch√†o m·ª´ng sau khi ƒëƒÉng k√Ω th√†nh c√¥ng
        /// </summary>
        /// <param name="email">Email ng∆∞·ªùi nh·∫≠n</param>
        /// <param name="userName">T√™n ng∆∞·ªùi d√πng</param>
        /// <returns>True n·∫øu g·ª≠i th√†nh c√¥ng</returns>
        public async Task<bool> SendWelcomeEmailAsync(string email, string userName)
        {
            try
            {
                var subject = "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi h·ªá th·ªëng!";
                var htmlContent = GenerateWelcomeEmailHtml(userName);
                var textContent = GenerateWelcomeEmailContent(userName);

                var result = await SendEmailAsync(email, subject, htmlContent, textContent);
                
                if (!result)
                {
                    _logger.LogWarning("Kh√¥ng th·ªÉ g·ª≠i email welcome t·ªõi {Email}", email);
                }

                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói khi g·ª≠i email welcome t·ªõi {Email}", email);
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i email ch·ª©a m√£ OTP ƒë·ªÉ reset password
        /// </summary>
        /// <param name="email">Email ng∆∞·ªùi nh·∫≠n</param>
        /// <param name="otpCode">M√£ OTP</param>
        /// <param name="userName">T√™n ng∆∞·ªùi d√πng</param>
        /// <returns>True n·∫øu g·ª≠i th√†nh c√¥ng</returns>
        public async Task<bool> SendForgotPasswordOtpEmailAsync(string email, string otpCode, string userName)
        {
            try
            {
                var subject = "M√£ x√°c th·ª±c ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u";
                var htmlContent = GenerateForgotPasswordEmailHtml(otpCode, userName);
                var textContent = GenerateForgotPasswordEmailContent(otpCode, userName);

                var result = await SendEmailAsync(email, subject, htmlContent, textContent);
                
                if (!result)
                {
                    _logger.LogWarning("Kh√¥ng th·ªÉ g·ª≠i email forgot password OTP t·ªõi {Email}", email);
                }

                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói khi g·ª≠i email forgot password OTP t·ªõi {Email}", email);
                return false;
            }
        }

        /// <summary>
        /// G·ª≠i email qua SMTP
        /// </summary>
        /// <param name="toEmail">Email ng∆∞·ªùi nh·∫≠n</param>
        /// <param name="subject">Ti√™u ƒë·ªÅ email</param>
        /// <param name="htmlContent">N·ªôi dung HTML</param>
        /// <param name="textContent">N·ªôi dung text thu·∫ßn</param>
        /// <returns>True n·∫øu g·ª≠i th√†nh c√¥ng</returns>
        private async Task<bool> SendEmailAsync(string toEmail, string subject, string htmlContent, string textContent)
        {
            try
            {
                
                if (string.IsNullOrEmpty(_emailSettings.SmtpHost))
                {
                    _logger.LogError("SMTP Host kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh");
                    return false;
                }

                using var smtpClient = new SmtpClient(_emailSettings.SmtpHost, _emailSettings.SmtpPort);
                smtpClient.EnableSsl = _emailSettings.EnableSsl;
                smtpClient.UseDefaultCredentials = _emailSettings.UseDefaultCredentials;
                smtpClient.Timeout = 30000; 
                
                if (!_emailSettings.UseDefaultCredentials)
                {
                    if (string.IsNullOrEmpty(_emailSettings.SmtpUsername) || string.IsNullOrEmpty(_emailSettings.SmtpPassword))
                    {
                        _logger.LogError("SMTP Username ho·∫∑c Password kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh");
                        return false;
                    }
                    
                    smtpClient.Credentials = new NetworkCredential(_emailSettings.SmtpUsername, _emailSettings.SmtpPassword);
                }

                using var message = new MailMessage();
                message.From = new MailAddress(_emailSettings.FromEmail, _emailSettings.FromName);
                message.To.Add(toEmail);
                message.Subject = subject;
                message.IsBodyHtml = true;

                
                var htmlView = AlternateView.CreateAlternateViewFromString(htmlContent, null, "text/html");
                var textView = AlternateView.CreateAlternateViewFromString(textContent, null, "text/plain");
                
                message.AlternateViews.Add(htmlView);
                message.AlternateViews.Add(textView);
                
                
                using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(30));
                await smtpClient.SendMailAsync(message, cts.Token);
                
                return true;
            }
            catch (OperationCanceledException)
            {
                _logger.LogError("Timeout khi g·ª≠i email t·ªõi {Email} sau 30 gi√¢y", toEmail);
                return false;
            }
            catch (SmtpException smtpEx)
            {
                _logger.LogError(smtpEx, "SMTP Error khi g·ª≠i email t·ªõi {Email}: StatusCode={StatusCode}", 
                    toEmail, smtpEx.StatusCode);
                return false;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói chung khi g·ª≠i email t·ªõi {Email}", toEmail);
                return false;
            }
        }

        /// <summary>
        /// T·∫°o n·ªôi dung HTML cho email OTP
        /// </summary>
        /// <param name="otpCode">M√£ OTP</param>
        /// <param name="userName">T√™n ng∆∞·ªùi d√πng</param>
        /// <returns>HTML content</returns>
        private string GenerateOtpEmailHtml(string otpCode, string userName)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>M√£ x√°c th·ª±c OTP</title>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }}
        .content {{ background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }}
        .otp-code {{ background: #fff; border: 2px solid #667eea; padding: 20px; margin: 20px 0; text-align: center; border-radius: 8px; }}
        .otp-number {{ font-size: 32px; font-weight: bold; color: #667eea; letter-spacing: 5px; }}
        .warning {{ background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }}
        .footer {{ text-align: center; margin-top: 30px; color: #666; font-size: 14px; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üõ°Ô∏è X√°c th·ª±c t√†i kho·∫£n</h1>
            <p>H·ªá th·ªëng Qu·∫£n l√Ω Vi ph·∫°m Giao th√¥ng</p>
        </div>
        <div class='content'>
            <h2>Xin ch√†o {userName},</h2>
            <p>B·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i <strong>H·ªá th·ªëng Qu·∫£n l√Ω Vi ph·∫°m Giao th√¥ng</strong>.</p>
            <p>ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω, vui l√≤ng s·ª≠ d·ª•ng m√£ x√°c th·ª±c d∆∞·ªõi ƒë√¢y:</p>
            
            <div class='otp-code'>
                <p>M√£ x√°c th·ª±c c·ªßa b·∫°n:</p>
                <div class='otp-number'>{otpCode}</div>
            </div>
            
            <div class='warning'>
                <strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong>
                <ul>
                    <li>M√£ n√†y c√≥ hi·ªáu l·ª±c trong <strong>10 ph√∫t</strong></li>
                    <li>Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai</li>
                    <li>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, h√£y b·ªè qua email</li>
                </ul>
            </div>
            
            <p>C·∫£m ∆°n b·∫°n ƒë√£ tham gia h·ªá th·ªëng c·ªßa ch√∫ng t√¥i!</p>
        </div>
        <div class='footer'>
            <p>¬© 2025 H·ªá th·ªëng Qu·∫£n l√Ω Vi ph·∫°m Giao th√¥ng</p>
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng ph·∫£n h·ªìi.</p>
        </div>
    </div>
</body>
</html>";
        }

        /// <summary>
        /// T·∫°o n·ªôi dung HTML cho email welcome
        /// </summary>
        /// <param name="userName">T√™n ng∆∞·ªùi d√πng</param>
        /// <returns>HTML content</returns>
        private string GenerateWelcomeEmailHtml(string userName)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>Ch√†o m·ª´ng b·∫°n!</title>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }}
        .content {{ background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }}
        .features {{ background: #fff; padding: 20px; margin: 20px 0; border-radius: 8px; border-left: 4px solid #28a745; }}
        .feature-item {{ margin: 10px 0; padding: 10px 0; border-bottom: 1px solid #eee; }}
        .feature-item:last-child {{ border-bottom: none; }}
        .cta {{ text-align: center; margin: 30px 0; }}
        .cta-button {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 30px; text-decoration: none; border-radius: 25px; display: inline-block; }}
        .footer {{ text-align: center; margin-top: 30px; color: #666; font-size: 14px; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üéâ Ch√†o m·ª´ng b·∫°n!</h1>
            <p>T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng</p>
        </div>
        <div class='content'>
            <h2>Xin ch√†o {userName},</h2>
            <p><strong>Ch√∫c m·ª´ng!</strong> T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c v√† k√≠ch ho·∫°t th√†nh c√¥ng.</p>
            <p>B·∫°n gi·ªù ƒë√¢y c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß c√°c t√≠nh nƒÉng c·ªßa <strong>H·ªá th·ªëng Qu·∫£n l√Ω Vi ph·∫°m Giao th√¥ng</strong>:</p>
            
            <div class='features'>
                <div class='feature-item'>
                    <strong>üìã B√°o c√°o vi ph·∫°m:</strong> B√°o c√°o c√°c h√†nh vi vi ph·∫°m giao th√¥ng
                </div>
                <div class='feature-item'>
                    <strong>üí∞ Tra c·ª©u ph·∫°t ngu·ªôi:</strong> Xem th√¥ng tin c√°c kho·∫£n ph·∫°t c·ªßa b·∫°n
                </div>
                <div class='feature-item'>
                    <strong>üìù N·ªôp khi·∫øu n·∫°i:</strong> Khi·∫øu n·∫°i v·ªÅ c√°c quy·∫øt ƒë·ªãnh x·ª≠ ph·∫°t
                </div>
                <div class='feature-item'>
                    <strong>üîî Nh·∫≠n th√¥ng b√°o:</strong> C·∫≠p nh·∫≠t th√¥ng tin m·ªõi nh·∫•t t·ª´ h·ªá th·ªëng
                </div>
            </div>
            
            <div class='cta'>
                <a href='#' class='cta-button'>ƒêƒÉng nh·∫≠p ngay</a>
            </div>
            
            <p>N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, ƒë·ª´ng ng·∫ßn ng·∫°i li√™n h·ªá v·ªõi ch√∫ng t√¥i.</p>
            <p>C·∫£m ∆°n b·∫°n ƒë√£ tham gia h·ªá th·ªëng!</p>
        </div>
        <div class='footer'>
            <p>¬© 2025 H·ªá th·ªëng Qu·∫£n l√Ω Vi ph·∫°m Giao th√¥ng</p>
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng ph·∫£n h·ªìi.</p>
        </div>
    </div>
</body>
</html>";
        }

        private string GenerateOtpEmailContent(string otpCode, string userName)
        {
            return $@"
Xin ch√†o {userName},

B·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i H·ªá th·ªëng Qu·∫£n l√Ω Vi ph·∫°m Giao th√¥ng.

M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: {otpCode}

M√£ n√†y c√≥ hi·ªáu l·ª±c trong 10 ph√∫t. Vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y v·ªõi ng∆∞·ªùi kh√°c.

Tr√¢n tr·ªçng,
H·ªá th·ªëng Qu·∫£n l√Ω Vi ph·∫°m Giao th√¥ng
            ";
        }

        private string GenerateWelcomeEmailContent(string userName)
        {
            return $@"
Xin ch√†o {userName},

Ch√†o m·ª´ng b·∫°n ƒë√£ gia nh·∫≠p H·ªá th·ªëng Qu·∫£n l√Ω Vi ph·∫°m Giao th√¥ng!

B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v√† s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng sau:
- B√°o c√°o vi ph·∫°m giao th√¥ng
- Xem th√¥ng tin ph·∫°t ngu·ªôi
- N·ªôp khi·∫øu n·∫°i
- Nh·∫≠n th√¥ng b√°o t·ª´ h·ªá th·ªëng

Tr√¢n tr·ªçng,
H·ªá th·ªëng Qu·∫£n l√Ω Vi ph·∫°m Giao th√¥ng
            ";
        }

        /// <summary>
        /// T·∫°o n·ªôi dung HTML cho email forgot password
        /// </summary>
        /// <param name="otpCode">M√£ OTP</param>
        /// <param name="userName">T√™n ng∆∞·ªùi d√πng</param>
        /// <returns>HTML content</returns>
        private string GenerateForgotPasswordEmailHtml(string otpCode, string userName)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</title>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background: linear-gradient(135deg, #dc3545 0%, #fd7e14 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }}
        .content {{ background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }}
        .otp-code {{ background: #fff; border: 2px solid #dc3545; padding: 20px; margin: 20px 0; text-align: center; border-radius: 8px; }}
        .otp-number {{ font-size: 32px; font-weight: bold; color: #dc3545; letter-spacing: 5px; }}
        .warning {{ background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }}
        .footer {{ text-align: center; margin-top: 30px; color: #666; font-size: 14px; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üîë ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h1>
            <p>H·ªá th·ªëng Qu·∫£n l√Ω Vi ph·∫°m Giao th√¥ng</p>
        </div>
        <div class='content'>
            <h2>Xin ch√†o {userName},</h2>
            <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n t·∫°i <strong>H·ªá th·ªëng Qu·∫£n l√Ω Vi ph·∫°m Giao th√¥ng</strong>.</p>
            <p>ƒê·ªÉ ti·∫øp t·ª•c ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng s·ª≠ d·ª•ng m√£ x√°c th·ª±c d∆∞·ªõi ƒë√¢y:</p>
            
            <div class='otp-code'>
                <p>M√£ x√°c th·ª±c c·ªßa b·∫°n:</p>
                <div class='otp-number'>{otpCode}</div>
            </div>
            
            <div class='warning'>
                <strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong>
                <ul>
                    <li>M√£ n√†y c√≥ hi·ªáu l·ª±c trong <strong>10 ph√∫t</strong></li>
                    <li>Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai</li>
                    <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, h√£y b·ªè qua email n√†y</li>
                    <li>Li√™n h·ªá h·ªó tr·ª£ n·∫øu b·∫°n nghi ng·ªù t√†i kho·∫£n b·ªã x√¢m nh·∫≠p</li>
                </ul>
            </div>
            
            <p>Sau khi nh·∫≠p m√£ x√°c th·ª±c, b·∫°n s·∫Ω c√≥ th·ªÉ t·∫°o m·∫≠t kh·∫©u m·ªõi cho t√†i kho·∫£n.</p>
        </div>
        <div class='footer'>
            <p>¬© 2025 H·ªá th·ªëng Qu·∫£n l√Ω Vi ph·∫°m Giao th√¥ng</p>
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng ph·∫£n h·ªìi.</p>
        </div>
    </div>
</body>
</html>";
        }

        /// <summary>
        /// T·∫°o n·ªôi dung text cho email forgot password
        /// </summary>
        /// <param name="otpCode">M√£ OTP</param>
        /// <param name="userName">T√™n ng∆∞·ªùi d√πng</param>
        /// <returns>Text content</returns>
        private string GenerateForgotPasswordEmailContent(string otpCode, string userName)
        {
            return $@"
Xin ch√†o {userName},

Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n t·∫°i H·ªá th·ªëng Qu·∫£n l√Ω Vi ph·∫°m Giao th√¥ng.

M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: {otpCode}

M√£ n√†y c√≥ hi·ªáu l·ª±c trong 10 ph√∫t. Vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y v·ªõi ng∆∞·ªùi kh√°c.

N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, h√£y b·ªè qua email n√†y.

Tr√¢n tr·ªçng,
H·ªá th·ªëng Qu·∫£n l√Ω Vi ph·∫°m Giao th√¥ng
            ";
        }
    }
} 